class Solution {
public:
    vector<string> generateParenthesis(int n) {
    vector<string> res;
    int closed=n;
    int open=0;
    //backtrack(n,0,0,curr,res);  
    backtrack(n,0,0,"",res);  
    return res;
    }
    private:
    void backtrack(int n, int open, int closed, string curr, vector<string>& res)
    {
        if(curr.size()==2*n) {res.push_back(curr); return;}//imp
        if(open<n) backtrack(n,open+1,closed,curr+'(',res);
        if(closed<open) backtrack(n,open,closed+1,curr+')',res);
    }
};
View less
